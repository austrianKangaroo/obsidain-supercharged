/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => OSC_Plugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// src/CanvasView.ts
var import_obsidian = __toModule(require("obsidian"));
var _CanvasView = class extends import_obsidian.ItemView {
  constructor(plugin, leaf) {
    super(leaf);
    this.painting = false;
    this.canvasWidth = 500;
    this.canvasHeight = 500;
    this.strokeColor = "#FF0000";
    this.strokeWidth = 10;
    this.plugin = plugin;
  }
  getIcon() {
    return "pencil";
  }
  getDisplayText() {
    return "Obsidian Supercharged - Drawing Canvas";
  }
  getViewType() {
    return _CanvasView.TYPE;
  }
  onunload() {
    this.plugin.canvasLeaf = null;
  }
  onload() {
    const container = this.contentEl;
    const rootEl = container.createDiv({ cls: "supercharged-canvas-div" });
    const buttonDiv = rootEl.createDiv();
    const COPY_BUTTON = buttonDiv.createEl("button");
    COPY_BUTTON.textContent = "copy to clipboard";
    COPY_BUTTON.onClickEvent(() => {
      this.copyToClipboard(this.canvas.toDataURL());
    });
    const CLEAR_BUTTON = buttonDiv.createEl("button");
    CLEAR_BUTTON.textContent = "clear canvas";
    CLEAR_BUTTON.onClickEvent(() => {
      var ctx = this.canvas.getContext("2d");
      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    });
    const colorPicker = rootEl.createDiv();
    const colorPickerLabel = colorPicker.createEl("label");
    const colorInput = colorPicker.createEl("input", { type: "color" });
    const COLOR_PICKER_ID = "color-picker";
    colorInput.id = COLOR_PICKER_ID;
    colorInput.addEventListener("change", (event) => {
      this.strokeColor = colorInput.value;
    });
    colorInput.value = this.strokeColor;
    colorPickerLabel.setAttribute("for", COLOR_PICKER_ID);
    colorPickerLabel.textContent = "Color";
    const strokeWidthSlider = rootEl.createDiv();
    const sliderInputLabel = strokeWidthSlider.createEl("label");
    const sliderInput = strokeWidthSlider.createEl("input", { type: "range" });
    sliderInput.setAttribute("min", "5");
    sliderInput.setAttribute("max", "25");
    sliderInput.value = this.strokeWidth + "";
    const SLIDER_INPUT_ID = "slider-input";
    sliderInput.id = SLIDER_INPUT_ID;
    sliderInput.oninput = () => {
      this.strokeWidth = parseInt(sliderInput.value);
    };
    sliderInputLabel.setAttribute("for", SLIDER_INPUT_ID);
    sliderInputLabel.textContent = "Pencil width";
    const canvasSizeSelect = rootEl.createDiv();
    const canvasSizeSelectLabel = canvasSizeSelect.createEl("label");
    const sizeSelect = canvasSizeSelect.createEl("select");
    const SIZE_SELECT_ID = "canvas-size-select";
    sizeSelect.id = SIZE_SELECT_ID;
    const small = sizeSelect.createEl("option");
    small.value = "small";
    small.text = "small";
    const medium = sizeSelect.createEl("option");
    medium.value = "medium";
    medium.text = "medium";
    const large = sizeSelect.createEl("option");
    large.value = "large";
    large.text = "large";
    sizeSelect.oninput = () => {
      switch (sizeSelect.value) {
        case "small":
          this.canvasWidth = 100;
          this.canvasHeight = 100;
          break;
        case "medium":
          this.canvasWidth = 300;
          this.canvasHeight = 300;
          break;
        case "large":
          this.canvasWidth = 500;
          this.canvasHeight = 500;
          break;
      }
      this.drawCanvas(rootEl);
    };
    canvasSizeSelectLabel.setAttribute("for", SIZE_SELECT_ID);
    canvasSizeSelectLabel.textContent = "Canvas size";
    this.drawCanvas(rootEl);
  }
  draw(event, ctx) {
    if (!this.painting) {
      return;
    }
    ctx.lineWidth = this.strokeWidth;
    ctx.lineCap = "round";
    ctx.strokeStyle = this.strokeColor;
    ctx.lineTo(event.offsetX, event.offsetY);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(event.offsetX, event.offsetY);
  }
  convertToImage(urlData) {
    return '\n<div><img src = "' + urlData + '"></div>\n';
  }
  copyToClipboard(urlData) {
    return __async(this, null, function* () {
      navigator.clipboard.writeText(this.convertToImage(urlData));
      new import_obsidian.Notice("Copied to clipboard");
    });
  }
  drawCanvas(parent) {
    var _a;
    (_a = this.canvas) == null ? void 0 : _a.remove();
    this.canvas = parent.createEl("canvas", { cls: "supercharged-canvas" });
    const ctx = this.canvas.getContext("2d");
    this.canvas.height = this.canvasHeight;
    this.canvas.width = this.canvasWidth;
    this.canvas.on("mousedown", ".supercharged-canvas", (event, _target) => {
      this.painting = true;
      this.draw(event, ctx);
    });
    this.canvas.on("mouseup", ".supercharged-canvas", (_event, _target) => {
      this.painting = false;
      ctx.beginPath();
    });
    this.canvas.on("mouseout", ".supercharged-canvas", (_event, _target) => {
      this.painting = false;
      ctx.beginPath();
    });
    this.canvas.on("mousemove", ".supercharged-canvas", (event, _target) => {
      this.draw(event, ctx);
    });
  }
};
var CanvasView = _CanvasView;
CanvasView.TYPE = "canvas-context-view";

// src/LatexContextView.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/latexCommands.ts
var GREEKS_LOWERCASE = {
  name: "Greek Symbols Lowercase",
  commands: [
    "\\alpha",
    "\\beta",
    "\\gamma",
    "\\delta",
    "\\epsilon",
    "\\varepsilon",
    "\\zeta",
    "\\eta",
    "\\theta",
    "\\vartheta",
    "\\iota",
    "\\kappa",
    "\\varkappa",
    "\\lambda",
    "\\mu",
    "\\nu",
    "\\xi",
    "\\omicron",
    "\\pi",
    "\\varpi",
    "\\rho",
    "\\varrho",
    "\\sigma",
    "\\varsigma",
    "\\tau",
    "\\upsilon",
    "\\phi",
    "\\varphi",
    "\\chi",
    "\\psi",
    "\\omega"
  ]
};
var GREEKS_UPERCASE = {
  name: "Greek Symbols Uppercase",
  commands: [
    "\\Gamma",
    "\\Delta",
    "\\Theta",
    "\\Lambda",
    "\\Xi",
    "\\Pi",
    "\\Sigma",
    "\\Upsilon",
    "\\Phi",
    "\\Psi",
    "\\Omega"
  ]
};
var SET_SYMBOLS = {
  name: "Set Theory",
  commands: [
    "\\mathbb{N}",
    "\\mathbb{Z}",
    "\\mathbb{Q}",
    "\\mathbb{R}",
    "\\mathbb{C}",
    "\\in",
    "\\notin",
    "\\ni",
    "\\subseteq",
    "\\subset",
    "\\supseteq",
    "\\supset",
    "\\cup",
    "\\uplus",
    "\\cap",
    "\\times",
    "\\setminus",
    "\\mathcal{P}(X)",
    "\\bigcup_{i \\in I} A_i",
    "\\bigcap_{i \\in I} A_i",
    "\\mathcal{S}",
    "f : A \\rightarrow B, x \\mapsto f(x)"
  ]
};
var RELATIONS = {
  name: "Relations",
  commands: [
    "\\equiv",
    "\\approx",
    "\\cong",
    "\\neq",
    "\\sim",
    "<",
    "\\leq",
    "\\nleq",
    "\\prec",
    "\\nprec",
    "\\preceq",
    "\\npreceq",
    "\\succ",
    "\\succeq",
    "\\nsucc",
    "\\nsucceq",
    "\\ll",
    "\\lll",
    "\\sqsubset",
    "\\sqsubseteq",
    "\\sqsupset",
    "\\sqsupseteq",
    ">",
    "\\ngtr",
    "\\geq"
  ]
};
var LOGIC_SYMBOLS = {
  name: "Logic",
  commands: [
    "\\exists",
    "\\exists!",
    "\\nexists",
    "\\forall",
    "\\neg",
    "\\land",
    "\\lor",
    "\\Rightarrow",
    "\\Leftarrow",
    "\\Leftrightarrow",
    "\\top",
    "\\bot",
    "\\vdash",
    "\\models"
  ]
};
var LINEAR_ALGEBRA = {
  name: "Linear Algebra",
  commands: [
    "\\mathbb{K}",
    "\\mathbb{K}^n",
    "\\mathbb{K}^{n \\times m}",
    "\\mathbb{K}[X]",
    "\\mathbb{K}[\\![ X ]\\!]",
    "\\oplus",
    "\\otimes",
    "\\hat p",
    "\\langle x, y \\rangle",
    "\\begin{pmatrix}x_1 \\\\ x_2 \\\\ x_3 \\end{pmatrix}",
    "\\begin{pmatrix}a & b \\\\ c & d \\end{pmatrix}",
    "\\begin{pmatrix}a & b & c \\\\ d & e & f \\\\ g & e & h \\end{pmatrix}",
    "\\left | \\begin{array}{rrr} a & b & c \\\\ c & d & e \\\\ f & g & h \\end{array} \\right |",
    "\\det A",
    "\\ker A",
    "\\text{im } A"
  ]
};
var CALCULUS = {
  name: "Calculus",
  commands: [
    "\\frac{\\partial f}{\\partial x_i}",
    "\\frac{d f}{d x}",
    "\\int_a^b f(x) dx",
    "\\lim_{x \\rightarrow a} f(x)",
    "\\infty",
    "\\sum_{i = 0}^{\\infty} a_i",
    "\\prod_{i = 0}^{\\infty} a_i",
    "\\sin",
    "\\cos",
    "\\tan",
    "\\arcsin",
    "\\arccos",
    "\\arctan"
  ]
};
var ARITHMETIC_OPERATORS = {
  name: "Arithmetic",
  commands: [
    "+",
    "*",
    "\\cdot",
    "\\div",
    "\\frac{a}{b}",
    "a^{b}"
  ]
};
var DECORATORS = {
  name: "Decorators",
  commands: [
    "\\hat{x}",
    "\\underline{x}",
    "\\overline{x}",
    "\\overrightarrow{AB}",
    "\\vec{x}",
    "\\tilde{x}"
  ]
};
var COMMAND_GROUPS = [
  ARITHMETIC_OPERATORS,
  LINEAR_ALGEBRA,
  CALCULUS,
  RELATIONS,
  SET_SYMBOLS,
  LOGIC_SYMBOLS,
  DECORATORS,
  GREEKS_LOWERCASE,
  GREEKS_UPERCASE
];

// src/LatexContextView.ts
var _LatexContextView = class extends import_obsidian2.ItemView {
  constructor(plugin, leaf) {
    super(leaf);
    this.plugin = plugin;
  }
  getDisplayText() {
    return "Obsidian Supercharged - Latex";
  }
  getViewType() {
    return _LatexContextView.TYPE;
  }
  onload() {
    return __async(this, null, function* () {
      yield (0, import_obsidian2.loadMathJax)();
      if (!this.plugin.activeEditor) {
        this.leaf.detach();
        return;
      }
      const container = this.contentEl;
      const rootEl = container.createDiv({ cls: "supercharged-table" });
      const commandGroups = [{
        name: "Custom Commands",
        commands: this.plugin.settings.custom_commands
      }].concat(COMMAND_GROUPS);
      commandGroups.forEach((group, i) => {
        const groupDiv = rootEl.createDiv();
        const header = groupDiv.createEl("h2", { cls: "collapsible" });
        header.textContent = group.name;
        const content = groupDiv.createDiv({ cls: "content" });
        group.commands.forEach((command, index) => {
          drawButton(command, content, () => {
            this.plugin.insertText(this.plugin.activeEditor, command);
            this.plugin.activeEditor.focus();
          });
        });
      });
      collapse();
      yield (0, import_obsidian2.finishRenderMath)();
    });
  }
  onunload() {
    this.plugin.latexLeaf = null;
  }
};
var LatexContextView = _LatexContextView;
LatexContextView.TYPE = "latex-context-view";
function drawButton(latexCommand, parent, callback) {
  const button = parent.createEl("button");
  button.appendChild((0, import_obsidian2.renderMath)(latexCommand, true));
  button.onClickEvent(callback);
  return button;
}
function collapse() {
  var coll = document.getElementsByClassName("collapsible");
  var i;
  for (i = 0; i < coll.length; i++) {
    coll[i].addEventListener("click", function() {
      this.classList.toggle("active");
      var content = this.nextElementSibling;
      if (content.style.maxHeight) {
        content.style.maxHeight = null;
      } else {
        content.style.maxHeight = 0 + "px";
      }
    });
  }
}

// src/OSC_SettingTab.ts
var import_obsidian3 = __toModule(require("obsidian"));
var OSC_SettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    this.reload();
  }
  reload() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Define your own latex commands" });
    for (let i = 0; i < this.plugin.settings.custom_commands.length; i++) {
      new import_obsidian3.Setting(containerEl).setName("Command " + (i + 1)).addText((text) => text.setPlaceholder("command").setValue(this.plugin.settings.custom_commands[i]).onChange((value) => __async(this, null, function* () {
        var _a;
        this.plugin.settings.custom_commands[i] = value;
        yield this.plugin.saveSettings();
        (_a = this.plugin.latexLeaf) == null ? void 0 : _a.detach();
      }))).addButton((button) => {
        button.setIcon("cross").onClick(() => __async(this, null, function* () {
          var _a;
          this.plugin.settings.custom_commands.splice(i, 1);
          yield this.plugin.saveSettings();
          (_a = this.plugin.latexLeaf) == null ? void 0 : _a.detach();
          this.reload();
        }));
      });
    }
    const addCommandButton = containerEl.createEl("button");
    addCommandButton.textContent = "+";
    addCommandButton.onClickEvent(() => __async(this, null, function* () {
      var _a;
      this.plugin.settings.custom_commands.push("");
      yield this.plugin.saveSettings();
      (_a = this.plugin.latexLeaf) == null ? void 0 : _a.detach();
      this.reload();
    }));
  }
};
var DEFAULT_SETTINGS = {
  custom_commands: [
    "command",
    "command",
    "command",
    "command",
    "command"
  ]
};

// src/main.ts
var OSC_Plugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.registerView(LatexContextView.TYPE, (leaf) => new LatexContextView(this, leaf));
      this.addCommand({
        id: "open-latex-leaf",
        name: "Open Latex Leaf",
        editorCallback: (editor, _view) => {
          this.spawnLatexView(editor);
        },
        hotkeys: [
          {
            key: "m",
            modifiers: [
              "Ctrl"
            ]
          }
        ]
      });
      this.registerView(CanvasView.TYPE, (leaf) => new CanvasView(this, leaf));
      this.addCommand({
        id: "open-supercharged-canvas",
        name: "Open Canvas",
        editorCallback: (_editor, _view) => {
          this.spawnCanvasView();
        },
        hotkeys: [
          {
            key: "j",
            modifiers: [
              "Ctrl"
            ]
          }
        ]
      });
      this.addSettingTab(new OSC_SettingTab(this.app, this));
    });
  }
  onunload() {
    var _a, _b;
    (_a = this.latexLeaf) == null ? void 0 : _a.detach();
    (_b = this.canvasLeaf) == null ? void 0 : _b.detach();
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  insertText(editor, text) {
    const line = editor.getCursor().line;
    const ch = editor.getCursor().ch;
    editor.replaceRange(text, editor.getCursor());
    editor.setCursor({ line, ch: ch + text.length });
  }
  spawnCanvasView() {
    if (this.canvasLeaf) {
      this.app.workspace.setActiveLeaf(this.canvasLeaf);
      return;
    }
    this.canvasLeaf = this.app.workspace.getRightLeaf(false);
    this.app.workspace.revealLeaf(this.canvasLeaf);
    this.canvasLeaf.setViewState({
      type: CanvasView.TYPE,
      active: true
    });
  }
  spawnLatexView(editor) {
    this.activeEditor = editor;
    if (this.latexLeaf) {
      app.workspace.setActiveLeaf(this.latexLeaf);
      return;
    }
    this.latexLeaf = this.app.workspace.getRightLeaf(false);
    this.app.workspace.revealLeaf(this.latexLeaf);
    this.latexLeaf.setViewState({
      type: LatexContextView.TYPE,
      active: true
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
